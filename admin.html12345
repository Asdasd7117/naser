<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
<meta charset="UTF-8" />
<title>لوحة المدير</title>
<style>
body { font-family: Arial; margin:0; padding:0; background:#e0f7fa; }
.container { max-width:1200px; margin:20px auto; padding:20px; }
nav { display:flex; gap:10px; justify-content:center; margin-bottom:20px; flex-wrap: wrap; }
nav button { padding:10px 20px; cursor:pointer; border:none; border-radius:8px; background:#4dd0e1; color:#000; }
nav button.active { background:#0288d1; color:#fff; }
section { display:none; background:#fff; padding:15px; border-radius:12px; box-shadow:0 5px 15px rgba(0,0,0,0.1); margin-bottom:20px; }
section.active { display:block; }
table { width:100%; border-collapse:collapse; margin-top:10px; }
th,td { border:1px solid #ccc; padding:8px; text-align:center; }
input, select, button, textarea { padding:8px; margin:5px 0; border-radius:6px; border:1px solid #ccc; width:100%; box-sizing:border-box; }
button.primary { background:#0288d1; color:#fff; border:none; cursor:pointer; padding:10px 16px; }
.row { display:flex; gap:10px; }
.row > * { flex:1; }
@media (max-width:800px){ .row{ flex-direction:column } }
</style>
</head>
<body>
<div class="container">
<h2>لوحة المدير</h2>
<nav>
  <button id="tasksTab" class="active">المهام</button>
  <button id="notificationsTab">الإشعارات</button>
  <button id="reportsTab">تقارير المندوبين</button>
  <button id="performanceTab">الأداء الميداني</button>
  <button id="usersTab">حسابات المستخدمين</button>
</nav>
<section id="tasksSection" class="active">
  <h3>إنشاء مهمة جديدة</h3>
  <form id="taskForm">
    <div class="row">
      <input type="text" id="clientName" placeholder="اسم العميل" required>
      <input type="text" id="clientAddress" placeholder="عنوان العميل" required>
    </div>
    <div class="row">
      <input type="time" id="visitTime" required>
      <select id="assignedTo" required><option value="">اختر مندوب</option></select>
    </div>
    <button type="submit" class="primary">حفظ المهمة</button>
  </form>
  <h4>المهام الحالية</h4>
  <table>
    <thead>
      <tr><th>العميل</th><th>العنوان</th><th>الوقت</th><th>المندوب</th><th>الحالة</th><th>حذف</th></tr>
    </thead>
    <tbody id="tasksTableBody"></tbody>
  </table>
</section>
<section id="notificationsSection">
  <h3>إرسال إشعار لمندوب محدد أو للجميع</h3>
  <select id="notifySelect"><option value="all">إلى الجميع</option></select>
  <textarea id="notificationMessage" placeholder="اكتب الرسالة هنا"></textarea>
  <button id="sendNotificationBtn" class="primary">إرسال الإشعار</button>
</section>
<section id="reportsSection">
  <h3>تقارير المندوبين</h3>
  <table>
    <thead><tr><th>المندوب</th><th>العميل</th><th>التقرير</th><th>الصورة</th></tr></thead>
    <tbody id="reportsTableBody"></tbody>
  </table>
</section>
<section id="performanceSection">
  <h3>الأداء الميداني</h3>
  <table>
    <thead>
      <tr><th>اسم المندوب</th><th>عدد المهام قيد التنفيذ</th><th>عدد المهام المؤجلة</th><th>عدد المهام المكتملة</th></tr>
    </thead>
    <tbody id="performanceTableBody"></tbody>
  </table>
</section>
<section id="usersSection">
  <h3>إدارة حسابات المندوب والمشرف</h3>
  <form id="createUserForm">
    <div class="row">
      <input type="email" id="newUserEmail" placeholder="البريد الإلكتروني" required>
      <input type="password" id="newUserPassword" placeholder="كلمة المرور" required>
    </div>
    <select id="newUserRole" required>
      <option value="">اختر الدور</option>
      <option value="agent">مندوب</option>
      <option value="supervisor">مشرف</option>
    </select>
    <button type="submit" class="primary">إنشاء حساب</button>
  </form>
  <h4>المستخدمون الحاليون</h4>
  <table>
    <thead><tr><th>البريد الإلكتروني</th><th>الدور</th><th>حذف</th></tr></thead>
    <tbody id="usersTableBody"></tbody>
  </table>
</section>
</div>
<script type="module">
import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

const SUPABASE_URL = 'https://vkativialsvvbifhjrey.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZrYXRpdmlhbHN2dmJpZmhqcmV5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxMDMxMDUsImV4cCI6MjA3MzY3OTEwNX0.iC-gq-uuXnK_1cJ_gYcjig8sr-bQfhqPk0SnuqbAeL0';

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

document.addEventListener('DOMContentLoaded', async () => {
  const tabs = { tasks: 'tasksSection', notifications: 'notificationsSection', reports: 'reportsSection', performance: 'performanceSection', users: 'usersSection' };
  Object.keys(tabs).forEach(key => {
    document.getElementById(key + 'Tab').addEventListener('click', () => {
      Object.values(tabs).forEach(s => document.getElementById(s).classList.remove('active'));
      document.getElementById(tabs[key]).classList.add('active');
      Object.keys(tabs).forEach(k => document.getElementById(k + 'Tab').classList.remove('active'));
      document.getElementById(key + 'Tab').classList.add('active');
    });
  });

  let agents = [];

  async function loadAgents() {
    try {
      const { data, error } = await supabase.from('users').select('id,email,role').eq('role', 'agent');
      if (error) throw error;
      agents = data || [];
      const assignedTo = document.getElementById('assignedTo');
      const notifySelect = document.getElementById('notifySelect');
      assignedTo.innerHTML = '<option value="">اختر مندوب</option>';
      notifySelect.innerHTML = '<option value="all">إلى الجميع</option>';
      agents.forEach(a => {
        const o1 = document.createElement('option'); o1.value = a.id; o1.textContent = a.email; assignedTo.appendChild(o1);
        const o2 = document.createElement('option'); o2.value = a.id; o2.textContent = a.email; notifySelect.appendChild(o2);
      });
    } catch (err) { console.error('خطأ جلب المناديب:', err); }
  }

  async function loadTasks() {
    try {
      const { data: tasks } = await supabase.from('tasks').select('*').order('created_at', { ascending: false });
      const tbody = document.getElementById('tasksTableBody');
      tbody.innerHTML = '';
      tasks.forEach(t => {
        const agent = agents.find(a => a.id === t.assigned_to);
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${t.client_name || '-'}</td><td>${t.client_address || '-'}</td><td>${t.visit_time || '-'}</td><td>${agent?.email || '-'}</td><td>${t.status || '-'}</td><td><button data-id="${t.id}" class="deleteTaskBtn">حذف</button></td>`;
        tbody.appendChild(tr);
      });
    } catch (err) { console.error('خطأ تحميل المهام:', err); }
  }

  async function loadPerformance() {
    try {
      const { data: tasks } = await supabase.from('tasks').select('assigned_to, status');
      const tbody = document.getElementById('performanceTableBody');
      tbody.innerHTML = '';
      agents.forEach(a => {
        const agentTasks = tasks.filter(t => t.assigned_to === a.id);
        const inProgress = agentTasks.filter(t => t.status === 'pending').length;
        const delayed = agentTasks.filter(t => t.status === 'delayed').length;
        const completed = agentTasks.filter(t => t.status === 'completed').length;
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${a.email || '-'}</td><td>${inProgress}</td><td>${delayed}</td><td>${completed}</td>`;
        tbody.appendChild(tr);
      });
    } catch (err) { console.error('خطأ تحميل الأداء الميداني:', err); }
  }

  document.getElementById('tasksTableBody').addEventListener('click', async e => {
    if (e.target.classList.contains('deleteTaskBtn')) {
      const id = e.target.dataset.id;
      if (!confirm('هل تريد حذف هذه المهمة؟')) return;
      await supabase.from('tasks').delete().eq('id', id);
      await loadTasks();
      await loadPerformance();
    }
  });

  document.getElementById('taskForm').addEventListener('submit', async e => {
    e.preventDefault();
    const client_name = document.getElementById('clientName').value.trim();
    const client_address = document.getElementById('clientAddress').value.trim();
    const visit_time = document.getElementById('visitTime').value;
    const assigned_to = document.getElementById('assignedTo').value;
    if (!assigned_to) return alert('اختر مندوب');
    await supabase.from('tasks').insert([{ client_name, client_address, visit_time, assigned_to, status: 'pending' }]);
    e.target.reset();
    await loadTasks();
    await loadPerformance();
  });

  document.getElementById('sendNotificationBtn').addEventListener('click', async () => {
    const msg = document.getElementById('notificationMessage').value.trim();
    const target = document.getElementById('notifySelect').value;
    if (!msg) return alert('أدخل رسالة');
    if (target === 'all') {
      const inserts = agents.map(a => ({ user_id: a.id, message: msg }));
      await supabase.from('notifications').insert(inserts);
    } else {
      await supabase.from('notifications').insert([{ user_id: target, message: msg }]);
    }
    document.getElementById('notificationMessage').value = '';
    alert('تم الإرسال');
  });

  async function loadReports() {
    const { data: reports } = await supabase.from('reports').select('*').order('created_at', { ascending: false });
    const { data: tasks } = await supabase.from('tasks').select('id,client_name');
    const tbody = document.getElementById('reportsTableBody');
    tbody.innerHTML = '';
    reports.forEach(r => {
      const agent = agents.find(a => a.id === r.agent_id);
      const task = tasks.find(t => t.id === r.task_id);
      const tr = document.createElement('tr');
      tr.innerHTML = `<td>${agent?.email || '-'}</td><td>${task?.client_name || '-'}</td><td>${r.report_text || '-'}</td><td>${r.image_url ? `<a href="${r.image_url}" target="_blank">رابط الصورة</a>` : '-'}</td>`;
      tbody.appendChild(tr);
    });
  }

  async function loadUsers() {
    const { data: users } = await supabase.from('users').select('*').in('role', ['agent', 'supervisor']);
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';
    users.forEach(u => {
      const tr = document.createElement('tr');
      tr.innerHTML = `<td>${u.email || '-'}</td><td>${u.role || '-'}</td><td><button data-id="${u.id}" class="deleteUserBtn">حذف</button></td>`;
      tbody.appendChild(tr);
    });
  }

  document.getElementById('usersTableBody').addEventListener('click', async e => {
    if (e.target.classList.contains('deleteUserBtn')) {
      const id = e.target.dataset.id;
      if (!confirm('هل تريد حذف هذا المستخدم؟')) return;
      await supabase.from('users').delete().eq('id', id);
      await loadUsers();
      await loadAgents();
      await loadTasks();
      await loadPerformance();
    }
  });

  document.getElementById('createUserForm').addEventListener('submit', async e => {
    e.preventDefault();
    const email = document.getElementById('newUserEmail').value.trim();
    const password = document.getElementById('newUserPassword').value;
    const role = document.getElementById('newUserRole').value;
    if (!email || !password || !role) return alert('أكمل جميع الحقول');
    try {
      const { data, error: signUpError } = await supabase.auth.signUp({ email, password });
      if (signUpError) throw signUpError;
      const userId = data.user?.id;
      if (!userId) throw new Error('لم يتم الحصول على معرف المستخدم من Auth');
      const { error: insertError } = await supabase.from('users').insert([{
        id: userId,
        email,
        role,
        password: 'default123'
      }]);
      if (insertError) throw insertError;
      alert('تم إنشاء الحساب بنجاح');
      e.target.reset();
      await loadUsers();
      await loadAgents();
      await loadTasks();
      await loadPerformance();
    } catch (err) {
      console.error('خطأ إنشاء المستخدم:', err);
      alert('حدث خطأ: ' + err.message);
    }
  });

  await loadAgents();
  await loadTasks();
  await loadReports();
  await loadUsers();
  await loadPerformance();
});
</script>
</body>
</html>
